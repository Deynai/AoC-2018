struct Agent
{
    float2 position;
    float angle;
};

#pragma kernel Update

RWStructuredBuffer<Agent> agents;
uint numAgents;

RWTexture2D<float4> TrailMap;
float width;
float height;

float trailWeight;
float turnSpeed;
float moveSpeed;
bool mirrorReflect;

float sensorOffsetDistance;
float sensorSize;
float sensorAngleRad;

float deltaTime;
float time;

uint hash(uint state) {
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float ScaleToRange01(uint state) {
    return state / 4294967295.0;
}

float Sense(Agent agent, float sensorAngleOffset) {

    float sensorAngle = agent.angle + sensorAngleOffset;
    float2 sensorDir = float2(cos(sensorAngle), sin(sensorAngle));

    float2 sensorPos = agent.position + sensorDir * sensorOffsetDistance;
    int sensorCentreX = (int)sensorPos.x;
    int sensorCentreY = (int)sensorPos.y;

    float sum = 0;

    int4 senseWeight = 1;

    for (int offsetX = -sensorSize; offsetX <= sensorSize; offsetX++) {
        for (int offsetY = -sensorSize; offsetY <= sensorSize; offsetY++) {
            int sampleX = min(width - 1, max(0, sensorCentreX + offsetX));
            int sampleY = min(width - 1, max(0, sensorCentreY + offsetY));
            sum += dot(senseWeight, TrailMap[int2(sampleX, sampleY)]);
        }
    }
    
    return sum;
}

[numthreads(8,8,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numAgents) { return; }

    Agent agent = agents[id.x];
    float2 pos = agent.position;
    uint randomInt = hash(pos.y * width + pos.x + hash(id.x + time * 100000));

    // Steer based on sensors

    float weightForward = Sense(agent, 0);
    float weightLeft = Sense(agent, sensorAngleRad);
    float weightRight = Sense(agent, -sensorAngleRad);

    float randomSteerStrength = ScaleToRange01(randomInt);
    float turnSpeedRad = turnSpeed * 2 * 3.1416;
    if (weightForward > weightLeft && weightForward > weightRight) {
        // do nothing
    }
    else if (weightForward < weightLeft && weightForward < weightRight) {
        // wiggle randomly
        agents[id.x].angle += (randomSteerStrength - 0.5) * 2 * turnSpeedRad * deltaTime;
    }
    else if (weightRight > weightLeft) {
        agents[id.x].angle -= randomSteerStrength * turnSpeedRad * deltaTime;
    }
    else if (weightLeft > weightRight) {
        agents[id.x].angle += randomSteerStrength * turnSpeedRad * deltaTime;
    }

    // Update Position

    float2 direction = float2(cos(agent.angle), sin(agent.angle));
    float2 newPos = agent.position + direction * deltaTime * moveSpeed;

    // Clamp to Boundaries and reflect

    // reflect like a mirror
    if (mirrorReflect && (newPos.x < 0 || newPos.x >= width)) {
        newPos.x = min(width - 1, max(0, newPos.x));

        float newAngle = 3.1416 - agents[id.x].angle;
        if (newAngle < 0) { newAngle += 3.1416 * 2; }
        agents[id.x].angle = newAngle;
    }
    else if (mirrorReflect && (newPos.y < 0 || newPos.y >= height)) {
        newPos.y = min(height - 1, max(0, newPos.y));

        float newAngle = 2*3.1416 - agents[id.x].angle;
        agents[id.x].angle = newAngle;
    }

    // reflect randomly
    else if (!mirrorReflect && (newPos.x < 0 || newPos.x >= width || newPos.y < 0 || newPos.y >= height)) {
        randomInt = hash(randomInt);
        float randomAngle = ScaleToRange01(randomInt) * 2 * 3.1415;

        newPos.x = min(width - 1, max(0, newPos.x));
        newPos.y = min(height - 1, max(0, newPos.y));
        agents[id.x].angle = randomAngle;
    }
    else {
        float4 oldTrail = TrailMap[int2(newPos)];
        TrailMap[int2(newPos)] = min(1, oldTrail + trailWeight * deltaTime);
    }

    agents[id.x].position = newPos;
}

#pragma kernel DiffuseMap

float decayRate;
float diffusionRate;
RWTexture2D<float4> DiffusedTrailMap;

[numthreads(8,8,1)]
void DiffuseMap(uint3 id : SV_DispatchThreadID) {
    
    // fade every pixel by an amount, dependent on time
    if (id.x < 0 || id.x >= (uint) width || id.y < 0 || id.y >= (uint) height) {
        return;
    }

    float4 sum = 0;
    float4 originalCol = TrailMap[id.xy];

    // Blur
    for (int offsetX = -1; offsetX <= 1; offsetX++) {
        for (int offsetY = -1; offsetY <= 1; offsetY++) {
            int sampleX = min(width - 1, max(0, id.x + offsetX));
            int sampleY = min(height - 1, max(0, id.y + offsetY));
            sum += TrailMap[int2(sampleX, sampleY)];
        }
    }

    float4 blurredCol = sum / 9;
    float diffuseWeight = saturate(diffusionRate * deltaTime);
    blurredCol = originalCol * (1 - diffuseWeight) + (blurredCol * diffuseWeight);

    //DiffusedTrailMap[id.xy] = blurredCol * saturate(1 - decayRate * deltaTime);
    DiffusedTrailMap[id.xy] = max(0, blurredCol - decayRate * deltaTime);

}

 